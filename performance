#!/usr/bin/env python2
#
# Copyright (c) 2018 Jonathan Weyn <jweyn@uw.edu>
#
# See the file LICENSE for your rights.
#

"""
Evaluate performance metrics for a MOS-X model. These functions should only be used after the data files in 'build' and
'validate' have been created.
"""

import mosx
import numpy as np
import pandas as pd
import os
import sys
import pickle
from optparse import OptionParser
from datetime import datetime
import matplotlib.pyplot as plt
from sklearn.metrics import explained_variance_score, mean_absolute_error, mean_squared_error, r2_score

# Suppress warnings
import warnings
warnings.filterwarnings("ignore")


def get_command_options():
    parser = OptionParser()
    parser.add_option('-l', '--learning-curve', dest='learning', action='store_true', default=False,
                      help='Generate a learning curve by re-training the model (time consuming)')
    parser.add_option('-t', '--naive-rain-correction', dest='tune_rain', action='store_true', default=False,
                      help='Use the raw precipitation from GFS/NAM to override or average with MOS-X')
    parser.add_option('-r', '--rain-post-average', dest='avg_rain', action='store_true', default=False,
                      help='If using a RainTuningEstimator, this will average the raw estimation from an ensemble'
                           'with that of the rain tuning post-processor')
    (opts, args) = parser.parse_args()
    return opts, args


options, arguments = get_command_options()

try:
    config_file = arguments[0]
except IndexError:
    print('Required argument (config file) not provided.')
    sys.exit(1)
config = mosx.util.get_config(config_file)

predict_timeseries = config['Model']['predict_timeseries']
if predict_timeseries:
    config['Model']['predict_timeseries'] = False

predictor_file = '%s/%s_CV_%s_predictors.pkl' % (config['SITE_ROOT'], config['station_id'],
                                                 config['Validate']['end_date'])
if not(os.path.isfile(predictor_file)):
    print("Cannot find validation predictors file '%s'. Please run 'validate' first." % predictor_file)
    sys.exit(1)


# Do some general regression characteristic scores from scikit-learn

with open(predictor_file, 'rb') as handle:
    predictors = pickle.load(handle)
predictor_array = np.concatenate((predictors['BUFKIT'], predictors['OBS']), axis=1)
true_array = predictors['VERIF']


# Make the prediction

predicted, all_predicted, predicted_timeseries = mosx.model.predict_all(config, predictor_file,
                                                                        naive_rain_correction=options.tune_rain)
if options.avg_rain:
    print('Using average of raw and rain-tuned precipitation forecasts')
    no_tuned_predictions = mosx.model.predict_all(config, predictor_file, naive_rain_correction=options.tune_rain,
                                                  rain_tuning=False)
    predicted = np.mean([predicted, no_tuned_predictions[0]], axis=0)


# Calculate general performance scores

multi = 'raw_values'
scores = np.nan * np.zeros((5, 4))
scores[0] = explained_variance_score(true_array[:, :4], predicted[:, :4], multioutput=multi)
scores[1] = mean_absolute_error(true_array[:, :4], predicted[:, :4], multioutput=multi)
scores[2] = mean_squared_error(true_array[:, :4], predicted[:, :4], multioutput=multi)
scores[3] = r2_score(true_array[:, :4], predicted[:, :4], multioutput=multi)

if config['Model']['rain_forecast_type'] in ['pop', 'categorical']:
    # Try to get probabilities for each category of rain
    rain_prob = mosx.model.predict_rain_proba(config, predictor_file)

scores_df = pd.DataFrame(scores)
score_names = ['Explained variance score', 'Mean absolute error', 'Mean squared error',
               'R^2 coefficient of determination', 'Brier score']
score_columns = ['High', 'Low', 'Wind', 'Rain']
scores_df.index = score_names
scores_df.columns = score_columns

print scores_df


# Optional learning curve plot

if options.learning:
    train_file = '%s/%s_predictors_train.pkl' % (config['SITE_ROOT'], config['station_id'])
    predictor_file = '%s/%s_CV_%s_predictors.pkl' % (config['SITE_ROOT'], config['station_id'],
                                                     config['Validate']['end_date'])
    predictors, targets, n_samples_test = mosx.model.combine_train_test(config, train_file, predictor_file,
                                                                        return_count_test=True)
    cv = mosx.model.SplitConsecutive(first=False, n_samples=n_samples_test)
    scorer = mosx.model.wxchallenge_scorer(no_rain=True)
    fig = mosx.model._plot_learning_curve(mosx.model.build_estimator(config), predictors, targets, cv=cv,
                                          scoring=scorer)
    plt.savefig('learning_curve.pdf')
